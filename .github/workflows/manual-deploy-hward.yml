name: Manual ECS Deployment - HWard

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy apps'
        required: true
        default: 'dev'
      image-tag:
        description: 'Container image tag to deploy'
        required: true
        default: 'latest'

env:
  app_name: avixo2-hward
  secret_id: web/avixo2-hward
  aws_account_id: 150131428018 # Refer to AWS Account ID

jobs:
  manual-deploy:
    runs-on: [ubuntu-20.04]
    permissions:
      id-token: write
      contents: read
      checks: write
    timeout-minutes: 20
    steps:
      - uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/github-{1}-{2}-role', env.aws_account_id, env.app_name, github.event.inputs.environment) }}

      - name: Retrieve Secrets - app
        uses: t-botz/aws-secrets-manager-read-action@5810cfb5a2bce14e3585a9be9f0b0fdee9eb0619 # v2.1.0
        with:
          secret-id: ${{ format('{0}/{1}', env.secret_id, github.event.inputs.environment) }}
          mask-json-values: true
          keys-as-outputs: true
          keys-as-env-vars: true

      - name: Post initiation to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844 # v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets[format('SPEEDOC_{0}_SLACK_CHANNEL_ID', github.event.inputs.environment)] }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "",
              "attachments": [
                {
                  "pretext": " <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}| Github Action pipeline execution started.>",
                  "color": "dbab09",
                  "author_name": "${{ github.actor }}",
                  "author_icon": "https://ca.slack-edge.com/T20NRFDJL-U01UD7T11NF-879e7fd5029e-72",
                  "fields": [
                    {
                      "title": "Repository",
                      "short": true,
                      "value": "${{ github.repository }}"
                    },
                    {
                      "title": "ECS Cluster",
                      "short": true,
                      "value": "${{ env.app_name }}-${{ github.event.inputs.environment }}-cluster"
                    },
                    {
                      "title": "Workflow name",
                      "short": true,
                      "value": "${{ github.workflow }}"
                    },
                    {
                      "title": "Container Image tag",
                      "short": true,
                      "value": "${{ github.event.inputs.image-tag }}"
                    }
                  ]
                }
              ]
            }

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2f9f10ea3fa2eed41ac443fee8bfbd059af2d0a4 # v1.6.0

      - name: Retrieve task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ format('{0}-{1}', env.app_name, github.event.inputs.environment) }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@61b0c00c3743b70987a73a1faf577f0d167d1574 # v1.1.3
        with:
          task-definition: task-definition.json
          container-name: ${{ env.app_name }}
          image: '${{ steps.login-ecr.outputs.registry }}/${{ env.app_name}}:${{ github.event.inputs.image-tag }}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a # v1.4.11
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: '${{ env.app_name }}-${{ github.event.inputs.environment }}-service'
          cluster: '${{ github.event.inputs.environment }}-cluster'
          wait-for-service-stability: true

      - name: Set color
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        if: always()
        id: set-result
        env:
          job_status: '${{ job.status }}'
        with:
          script: |
            let { job_status } = process.env

            switch (job_status)
            {
              case "success":
                return "good";
                break;
              case "failure":
                return "danger";
                break;
              case "cancelled":
                return "#808080";
                break;

            }
            return job_status
          result-encoding: string

      - name: Post completion to a Slack channel
        if: always()
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844 # v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets[format('SPEEDOC_{0}_SLACK_CHANNEL_ID', github.event.inputs.environment)] }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text": "",
              "attachments": [
                { 
                  "pretext": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}| Github Action pipeline execution Pipeline ${{ job.status }}.> ",
                  "color": "${{ steps.set-result.outputs.result }}",
                  "author_name": "${{ github.actor }}",
                  "author_icon": "https://ca.slack-edge.com/T20NRFDJL-U01UD7T11NF-879e7fd5029e-72",
                  "fields": [
                    {
                      "title": "Repository",
                      "short": true,
                      "value": "${{ github.repository }}"
                    },
                    {
                      "title": "ECS Cluster",
                      "short": true,
                      "value": "${{ env.app_name }}-${{ github.event.inputs.environment }}-cluster"
                    },
                    {
                      "title": "Workflow name",
                      "short": true,
                      "value": "${{ github.workflow }}"
                    },
                    {
                      "title": "Container Image tag",
                      "short": true,
                      "value": "${{ github.event.inputs.image-tag }}"
                    }
                  ]
                }
              ]
            }
