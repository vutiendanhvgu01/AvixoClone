name: "Terraform - Admin - Dev"

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/admin/env/dev/**'
      - 'terraform/admin/module/app/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/admin/env/dev/**'
      - 'terraform/admin/module/app/**'

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  environment: dev
  app_name: avixo2
  folder_path: terraform/admin/env/dev
  aws_account_id: ${{ secrets.AVIXO_AWS_ID }} # Refer to AWS Account ID

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
    steps:
      - name: Checkout
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0

      - uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/gha-tf-{1}-role', env.aws_account_id, env.app_name) }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
        with:
          terraform_version: 1.2.9
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.folder_path }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.folder_path }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.folder_path }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
        working-directory: ${{ env.folder_path }}

      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ${{ env.folder_path }}

      - uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### Terraform Plan Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.folder-path }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ${{ env.folder_path }}
